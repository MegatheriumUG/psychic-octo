Aktuelle ToDos:
	Das "MonGOD" genannte Unterprogramm muss am 1.04. in Betrieb gehen. Um umfangreiche Tests zu ermöglichen, und dem potentiellen Verschleppen der Deadline entgegenzuwirken, sollten die folgenden Controller am Mittwoch, am 25.3., ab 15:00 einsatzbereit sein:
		GET /ServerList
			- liste aller Server, sowie Anzeige der sekundären Domain. Die sekundäre Domain ist die zweite (!) domain, die einem Server hinzugefügt wurde, d.h. auffindbar unter server.domains[1]. Aber: nicht jeder Server besitzt eine sekundäre Domain.
			- liefert als Status "success.delete", wenn zuvor ein Server gelöscht wurde. Der ServerDelete-Controller leitet zur ServerList um.
		GET /ServerAdd
		POST /ServerAdd
			- fügt einen neuen Server in die Liste der verwalteten hinzu
			- Parameter: "ram" (step=0.01), "cpus", "hdd", "ssd" (all numbers, step=1), "domains" (comma-seperated list of domains, normal textfield), "ip" (required), "ownerId"
		GET /ServerEdit
		POST /ServerEdit
			- bearbeitet einen bestehenden Server. Domains werden in einem seperaten Controller hinzugefügt, siehe ServerView
			- Felder: "ram", "cpus", "hdd", "ssd", "ip", "ownerId", "serverId"
		GET /ServerView
			- Übersicht über einen einzelnen Server.
			- Listet alle Domains, die diesem Server hinzugefügt wurden, auf.
			- Beinhaltet ein-Zeilen-Formular, um neue Domains hinzuzufügen (siehe POST /ServerDomainAdd)
			- hat den Status "success.domainAdd", wenn zuvor eine Domain zu diesem Server hinzugefügt wurde
		GET /ServerDelete
			- löscht einen Server aus der Datenbank (oder versteckt ihn)
			- leitet zu ServerList um
		POST /ServerDomainAdd
			- fügt eine Domain zu einem Server hinzu. Ggfs. mit port, aber immer ohne Protokoll und Pfad (d.h. "bla.foo.com:2000" statt "http://bla.foo.com:2000/Home"). Validierung kann im Textfeld dank HTML5 erfolgen, als NICHT_MUST_HAVE wäre das cool mal auszuprobieren :D. In HTML5 kann man Textfeldern regex geben, mit denen die inhalte validiert werden.
			- Parameter: serverId und domain
			- leitet zu ServerView um

		GET /ServiceList
			- listet alle Services auf, grob, in einer Tabelle.
			- Spalten: Name, Aktionen
		GET /ServiceAdd
		POST /ServiceAdd
			- simpler ServiceAdd-Controller mit Formular.
			- Eingabefelder: "Name"
			- alle anderen Werte werden im nachhinein zugeordnet, siehe GET /ServiceView
		GET /ServiceView
			- Übersicht über den Service. Jeder Service hat scheiße in den Haaren.
			- außerdem Skripte, Dateien und unterschiedliche Konfigurationen.
			- Konfigurationen, Skripte, Dateien in _dieser_ Reihenfolge in 3 Tabellen jeweils auflisten.
			- Skripte: Die einzelnen Befehle eines Skripts untereinander auflisten
			- hat status "success.scriptDelete", wenn ein Skript dieses Dienstes zuvor gelöscht wurde
			- hat status "success.add", wenn dieser Service zuvor erstellt wurde (/ServiceAdd leitet nun hierhin um)
		GET /ServiceScriptAdd
		POST /ServiceScriptAdd
			- einfaches Formular zum erstellen eines Skriptes
			- Felder: "Skripttyp", "Befehle"
			- Befehle ist eine textarea, welche im Anschluss serverseitig bei jedem Zeilenumbruch in einzelne Befehle umgewandelt wird
			- sende natürlich serviceId mit!
		GET /ServiceScriptEdit
		POST /ServiceScriptEdit
			- Skript-Bearbeitungs-Formular, analog zu ServiceScriptAdd
		GET /ServiceScriptDelete
			- entfernt ein Skript und leitet danach zu ServiceView mit dem Status "success.scriptDelete" weiter
		GET /ConfigurationFieldList
			- listet in einer Tabelle die Konfigurations-Werte EINER Konfiguration auf.
			- beinhaltet ein Ein-Zeilen-Formular mit den Feldern "Name" und "Wert" (name and value), über das ein neues Konfigurationspaar hinzugefügt wird (siehe POST /ServiceConfigurationFieldAdd)
			- falls möglich: per "klick" in die Tabellenspalte soll sich der Wert zu einem input-Element umwandeln, darin steht der bisherige Wert. Rechts davon ist ein submit-Button, das ganze steht in einem Formular, welcher zu POST /ConfigurationFieldEdit verlinkt, und neben der configurationId auch den name des Wertes angibt. Ansonsten richten wir noch ein GET /ConfigurationFieldEdit-Formular ein.
			- hat status "success.add", wenn ein Feld erfolgreich hinzugefügt wurde - oder "success.edit" und "success.delete"
		POST /ConfigurationFieldAdd
			- fügt ein neues Feld zu einer Konfiguration eines Services/Deployments hinzu.
			- leitet zu /ConfigurationFieldList mit status=success.add um
		GET /ConfigurationFieldDelete
			- entfernt ein Feld.
			- zu übermittelnde Werte:
				- configurationId (id der Konfiguration, die hier bearbeitet wird)
				- name (name des Feldes)
			- leitet danach an /ConfiguartionFieldList mit status=success.delete um
		POST /ConfigurationFieldEdit
			- bearbeitet ein Feld, aktualisiert seinen Wert.
			- erhält configurationId, name und value
			- leitet danach an /ConfigurationFieldList mit status=success.edit weiter

		GET /DeploymentList
			- listet alle Deployments auf
			- hat ein-zeilen-formular für die Erstellung eines Deployments (Felder: "Name", "Beschreibung", Controller: POST /DeploymentAdd)
			- Strukturierung: Tabelle
			- Spalten: "Name", "Beschreibung" (maximal-breite), "Dienste", "Aktionen"
			- "Dienste" stellt eine vertikale Liste der hierdrin verwendeten Dienste (nur ihre Namen, die mit GET /ServiceView mit der entsprechenden Übersicht verknüpft sind) dar
			- Aktionen sind:
				- /DeploymentDelete - Löschen
				- /DeploymentView - Übersicht
			- hat Status "success.delete", wenn zuvor ein Deployment gelöscht wurde
		GET /DeploymentView
			- listet alle Infos zu diesem Deployment auf
			- Tabellen: "Konfiguration", "Dienste"
			- "Dienste"-Tabelle:
				- Darüber: Link zu "Dienst hinzufügen" (/DeploymentServiceAdd)
				- Spalten: "Name", "Server", "Aktionen"
				- "Server":
					- vertikale Auflistung der in diesem Deployment verwendeten Server, jeweils IP-Adresse. Dahinter zu jedem Server die folgenden beiden "Aktionen":
					- "Starten": /DeploymentServiceStart
					- "Stoppen": /DeploymentServiceStop
					- "Installieren": /DeploymentServiceInstall (nur, wenn servers[index].installed "false" ist)
					- "Deinstallieren": /DeploymentServiceUninstall (nur, wenn servers[index].installed "true" ist)
				- "Aktionen":
					- "Löschen": /DeploymentServiceDelete
					- "Bearbeiten": /DeploymentServiceEdit
			- "Konfiguration"-Tabelle:
				- Spalten: "Konfiguration", "Werte", "Aktionen"
				- Konfiguration = name der konfiguration
				- werte = anzahl der key-value-pairs
				- Aktionen:
					- "Bearbeiten": /ConfigurationFieldList
					- "Löschen": /DeploymentConfigurationDelete
						- löscht btw. nur die Verlinkung der Configuration mit diesem Deployment, nicht die Configuration an sich
			- hat Status "success.add", wenn vorher das Deployment erstellt wurde
			- hat Status "success.configurationDelete", wenn vorher eine config dieses deploys gelösccht wurde
		POST /DeploymentAdd
			- legt mittels "Name" und "Beschreibung" (name and description) ein leeres Deployment an, welches im Anschluss in der DeploymentList-Tabelle angezeigt wird und aufgrund dessen im nachhinein mit inhalten (services, configurations) gefüllt wird
			- leitet nach "/DeploymentView" zu dem erstellen View um
		GET /DeploymentDelete
			- löscht ein Deployment, leitet mit status=success.delete nach DeploymentList um
		GET /DeploymentServiceStart
		GET /DeploymentServiceStop
		GET /DeploymentServiceInstall
		GET /DeploymentServiceUninstall
			- sind alle unwichtig für die GUI, da eh nur iwo hin weitergeeiertleitet wird (sorry, kb das jetzt zu bschreiben)
		GET /DeploymentServiceAdd
		POST /DeploymentServiceAdd
			- Formular, zum hinzufügen eines Dienstes zu einem Deployment
			- Felder:
				- Dienst (Auswahlfeld, mit Liste aller Dienste)
				- Server (Multi-Auswahlfeld mit einer Liste ALLER Server (dringend notwendig, sobald MonGOD läuft: Textfeld, welches das Auswahlfeld filtert, da wir bereits jetzt 25 Server besitzen und noch nicht mal Dressiety veröffentlicht haben; in Java ist sowas als "ComboBox" bekannt, sicherlich kann man da zunächst eine simple Lösung über jQuery o.ä. einbinden))
		GET /DeploymentServiceEdit
		POST /DeploymentServiceEdit
			- analog DeploymentServiceAdd, halt mit bisherigen Werten im Formular
		GET /DeploymentConfigurationDelete
			- entfernt eine configuration von einem Deployment
			- leitet danach zu DeploymentView mit status=success.configurationDelete weiter

		GET /ServiceFileAdd
		POST /ServiceFileAdd
			- erstellt eine neue Datei in einem Service
			- Parameter: serviceId, name, content
			- bitte content-Textarea etwas größer machen (Dateien können lang sein)
		GET /ServiceFileEdit
		POST /ServiceFileEdit
			- Analog zu ServiceFileAdd
			- "name" soll nicht als Eingabefeld erscheinen, aber mit an den Server geschickt werden (hidden; name dient als identifizierung der datei, so wie eine _id)
		GET /ServiceFileDelete
			- lösccht eine Datei
			- erhält hierzu serviceId und name (Name der Datei)
			- leitet zu ServiceView mit Status "success.fileDelete" um

		GET /ConfigurationAdd
		POST /ConfigurationAdd
			- Formular, welches eine bestehende Konfiguration zu einem Service oder einem Deployment hinzufügt, ODER eine neue Konfiguration erstellt und diese zu einem Service oder Deployment hinzufügt
			- Eingabefelder: "Auswahlbox", "Name"
			- In der Auswahlbox soll eine liste der bisherigen Konfigurationen stehen, damit man eine bestehende Konfiguration auswählen und zu einem Service oder Deployment hinzufügen kann
			- wenn man eine neue Configuration erstellen will, füllt man stattdessen das Textfeld "Name" aus; im Anschluss wird eine Configuration mit dem Namen erstellt
			- wird serviceId übermittelt, dann wird die config zu dem service hinzugefügt; wird deploymentId übermittelt, wird sie zum deployment hinzugefügt

		GET /ConfigurationEdit
		POST /ConfigurationEdit
			- lediglich ein Formular zum umbenennen einer Konfiguration.
			- hat nichts mit deployments oder services zu tun, sondern nur mit der Konfiguration

		GET /ConfigurationDelete
			- entfernt eine Konfiguration von einem Service oder einem Deployment. leitet danach zur ServiceView oder zur DeploymentView mit dem Status "success.configurationDelete" weiter