Die Controller antworten grundsätzlich im JSON-Format.
Parameter werden üblicherweise über die URL angegeben, z.B.: /ProjectList?companyId=some-company-id

"Ohne Populationen" bedeutet, dass beim entsprechenden Model keine Verknüpfungen zu anderen Models aufgelöst wurden. Bei "model.Company" bedeutete dies, dass "company.image" lediglich die ID der File beinhaltet, nicht aber ein Objekt, welches unter _id die ID der File beinhaltet (d.h. {company: {name: 'Dressiety', description: 'desc', image: '31237891273987129371'}} anstelle von {company: {name: ..., descr..., image: {_id: '31237891273987129371'}}}). Siehe auch das Datenbankmodel unter ./model/Company.js und ./model/File.js

Parameter beziehen sich, ohne weitere Angabe, auf die Felder des Models
Antworten beziehen sich, ohne weitere Angabe, auf den data-Part der Antwort: {status: 'success|error', data: {response data}, template: 'some template name for the gui'}

Delete- und Edit-Controller antworten üblicherweise nur mit einem Status ({status: 'success'} oder {status: 'error'}) und ggf. Fehlermeldungen.

POST /UserAdd
	Erstellt ein neues Benutzerkonto.

	Parameter
		username
		email
		password
		name.first
		name.last

	Antwort
		{userId: 'die id des erstellten Benutzerkontos'}

POST /UserLogin
	Ermöglicht es, einen User anzumelden.

	Parameter
		username	der Benutzername des Nutzers
		password	das Passwort des Nutzers

	Antwort
		{sessionId: 'die neue session-id. sie sollte an jede Anfrage angehängt werden/als parameter mitgeschickt werden'}

GET /CompanyList
	Sucht alle Unternehmen in der Datenbank und gibt diese im JSON-Format zurück.
	companies: beinhaltet ein Model.Company-Array ohne Populationen

	Beispiel:
		/CompanyList
		=> {companies: [{name: "Dressiety", description: "Some desc..."}]}

POST /CompanyAdd
	Erstellt ein neues Unternehmen.
	Model: ./model/Company.js

	Parameter:
		name
		description

POST /DiscussionPostAdd
	Erstellt einen neuen Post.

	Parameter
		content
		thread
		parentPostId	(optional) id des übergeordneten Posts, falls vorhanden; equivalent zu Post.post

	Antwort
		{postId: 'die id des neu erstellten Posts'}

GET /DiscussionPostDelete
	Löscht (versteckt) einen Post.

	Parameter
		postId

POST /DiscussionPostEdit
	Aktualisiert einen Post.

	Parameter
		postId	die ID des zu bearbeitenden Posts
		content

GET /DiscussionPostList
	Listet alle (sichtbaren) Posts eines Threads auf.

	Parameter
		threadId	die ID des übergeordneten Threads

	Antwort
		{posts: [ein array mit allen Post-Objekten, unpopulated]}

POST /DiscussionThreadAdd
	Erstellt einen neuen Thread.

	Parameter
		title
		board

	Antwort:
		{threadId: 'die id des neu erstellten Threads'}

GET /DiscussionThreadDelete
	Löscht (versteckt) einen Thread.

	Parameter
		threadId

POST /DiscussionThreadEdit
	Aktualisiert einen Thread.

	Parameter
		threadId
		title

GET /DiscussionThreadList
	Listet alle (sichtbaren) Threads eines Forums auf.

	Parameter
		boardId	beinhaltet das Forum, dessen Threads aufgelistet werden sollen

	Antwort
		{threads: [array von threads, unpopulated]}

POST /ProjectAdd
	Erstellt ein Projekt.
	Model: ./model/Project.js

	Parameter:
		name
		companies	entweder eine einzelne company._id oder mehrere, die alle unter dem Namen "companies" versendet werden; z.B. mehrere <input type="checkbox" name="companies" value="company._id" /> mit unterschiedlichen Company-IDs

	Antwort:
		{projectId: 'Die ID des gerade erstellten Projektes'}

GET /ProjectDelete
	Löscht ein Projekt.

	Parameter:
		projectId	muss angegeben werden

POST /ProjectEdit
	Aktualisiert ein Projekt.

	Parameter:
		projectId	die ID des Projektes
		name
		companies	entweder eine einzelne company._id oder mehrere, die alle unter dem Namen "companies" versendet werden; z.B. mehrere <input type="checkbox" name="companies" value="company._id" /> mit unterschiedlichen Company-IDs

GET /ProjectList
	Listet alle Projekte auf, oder alle Projekte, die einem bestimmten Unternehmen zugeordnet wurden.
	Model: ./model/Project.js

	Parameter:
		companyId 	(optional)	wenn übergeben, wird nur nach Projekten von diesem Unternehmen gesucht, ansonsten werden alle Projekte aufgelistet

	Antwort:
		{projects: [alle gefunden projekte]}

POST /ProjectTaskAdd
	Erstellt einen neuen ProjectTask.
	Model: ./model/ProjectTask.js

	Parameter:
		project
		title
		description
		status

	Antwort:
		{taskId: 'id des erstellten Task'}

GET /ProjectTaskDelete
	Löscht den entsprechenden ProjectTask.

	Parameter:
		taskId	die ID des Tasks

POST /ProjectTaskEdit
	Bearbeitet die Projektaufgabe.

	Parameter:
		taskId	die ID der Aufgabe
		project
		title
		description
		status

GET /ProjectTaskList
	Liefert alle ProjectTasks, optional filterbar.
	Model: ./model/ProjectTask.js

	Parameter:
		title	(optional) nur Tasks, die diesen title (case-insensitiv) beinhalten, werden angezeigt
		projectId	(optional) nur Tasks aus diesem Projekt werden angezeigt
		time	(optional) nur Tasks nach oder zu diesem Zeitstempel (in ms) werden angezeigt

	Antwort:
		{tasks: [alle gefundenen tasks]}

POST /ProjectTaskStatusAdd
	Fügt einen neuen projekttask-Status hinzu.

	Parameter:
		name 	Name des Stauts ("Fertig", "In Arbeit", "In Revision", "Testing", ...)
		finished	wenn übergeben und nicht leer, wird ein Task mit diesem Status als "abgeschlossen" markiert
		company	ID des Unternehmens
		project	ID des Projektes

	Antwort:
		{statusId: 'ID des erstellten Status'}

GET /ProjectTaskStatusDelete
	Löscht einen Status. Alle Tasks, die in diesem Status existieren, werden stattdessen in einen, ebenfalls übergebenen, Status verschoben.
	Der übergebene Status darf keine strengeren Filterkriterien aufweisen, als der vorherige Status, da ansonsten nicht alle Tasks den neuen Status erhalten dürfen. Dies wird serverseitig abgefangen.

	Parameter:
		statusId	die ID des zu löschenden Status
		newStatusId	die ID des neuen Status, zu dem die Tasks verschoben werden, die den zu löschenden Status besaßen

POST /ProjectTaskStatusEdit
	Bearbeitet einen bestehenden Status.

	Parameter:
		statusId	die ID des zu bearbeitenden Status
		name 	Name des Stauts ("Fertig", "In Arbeit", "In Revision", "Testing", ...)
		finished	wenn übergeben und nicht leer, wird ein Task mit diesem Status als "abgeschlossen" markiert
		company	ID des Unternehmens
		project	ID des Projektes

GET /ProjectTaskStatusList
	Listet alle Projekt-Task-Stati auf. Ein Status ist z.B. "Fertig", "In Arbeit", "In Revision", "Rückmeldung erwartet"
	Model: ./model/ProjectTaskStatus.js

	Parameter:
		companyId 	(optional) wenn übergeben, filtert nach dem Unternehmen
		projectId 	(optional) wenn übergeben, filtert nach dem Projekt

	Antwort:
		{status: [alle gefundenen Stati]}